// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  validators Validator[]
  alerts     Alert[]
  webhooks   WebhookConfig[]

  @@map("users")
}

model Validator {
  id          String   @id @default(cuid())
  name        String
  beaconNodeUrl String
  userId      String
  apiKey      String   @unique @default(cuid())
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user    User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  alerts  Alert[]
  reports AgentReport[]
  agents  Agent[]

  @@map("validators")
}

model Agent {
  id        String   @id @default(cuid())
  apiKey    String   @unique
  name      String?
  isActive  Boolean  @default(true)
  lastSeen  DateTime @default(now())
  createdAt DateTime @default(now())
  validatorId String?

  // Relations
  reports   AgentReport[]
  validator Validator?   @relation(fields: [validatorId], references: [id], onDelete: SetNull)

  @@map("agents")
}

model AgentReport {
  id          String   @id @default(cuid())
  agentId     String
  validatorId String?
  status      ReportStatus
  message     String?
  signature   String?
  consensus   Boolean  @default(false)
  createdAt   DateTime @default(now())

  // Relations
  agent    Agent     @relation(fields: [agentId], references: [id], onDelete: Cascade)
  validator Validator? @relation(fields: [validatorId], references: [id], onDelete: Cascade)
  alert     Alert?    @relation("ReportAlert")

  @@map("agent_reports")
}

model Alert {
  id          String   @id @default(cuid())
  validatorId String
  userId      String
  status      AlertStatus @default(PENDING)
  message     String
  reportId    String?  @unique
  createdAt   DateTime @default(now())
  resolvedAt  DateTime?

  // Relations
  validator Validator    @relation(fields: [validatorId], references: [id], onDelete: Cascade)
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  report    AgentReport? @relation("ReportAlert", fields: [reportId], references: [id])

  @@map("alerts")
}

model WebhookConfig {
  id          String   @id @default(cuid())
  userId      String
  name        String
  url         String
  secret      String?
  events      Json     // Array of event types to trigger on
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("webhook_configs")
}

enum ReportStatus {
  HEALTHY
  UNHEALTHY
  CONSENSUS_REACHED
  CONSENSUS_FAILED
}

enum AlertStatus {
  PENDING
  ACKNOWLEDGED
  RESOLVED
}
